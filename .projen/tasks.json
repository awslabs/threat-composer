{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build for all affected projects",
      "steps": [
        {
          "exec": "yarn nx run-many --target=build --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "clobber": {
      "name": "clobber",
      "description": "hard resets to HEAD of origin and cleans the local repo",
      "env": {
        "BRANCH": "$(git branch --show-current)"
      },
      "steps": [
        {
          "exec": "git checkout -b scratch",
          "name": "save current HEAD in \"scratch\" branch"
        },
        {
          "exec": "git checkout $BRANCH"
        },
        {
          "exec": "git fetch origin",
          "name": "fetch latest changes from origin"
        },
        {
          "exec": "git reset --hard origin/$BRANCH",
          "name": "hard reset to origin commit"
        },
        {
          "exec": "git clean -fdx",
          "name": "clean all untracked files"
        },
        {
          "say": "ready to rock! (unpushed commits are under the \"scratch\" branch)"
        }
      ],
      "condition": "git diff --exit-code > /dev/null"
    },
    "compile": {
      "name": "compile",
      "description": "Only compile for all affected projects",
      "steps": [
        {
          "exec": "npx nx run-many --target=build --all --skip-nx-cache --nx-bail"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files",
      "steps": [
        {
          "exec": "ts-node --project tsconfig.dev.json .projenrc.ts"
        }
      ]
    },
    "dev": {
      "name": "dev",
      "steps": [
        {
          "exec": "GENERATE_SOURCEMAP=false npx nx run @aws/threat-composer-app:dev"
        }
      ]
    },
    "eject": {
      "name": "eject",
      "description": "Remove projen from the project",
      "env": {
        "PROJEN_EJECTING": "true"
      },
      "steps": [
        {
          "spawn": "default"
        }
      ]
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase for all affected projects",
      "steps": [
        {
          "exec": "yarn nx run-many --target=eslint --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "export:examples": {
      "name": "export:examples",
      "steps": [
        {
          "spawn": "build"
        },
        {
          "exec": "node ./scripts/exportExamples.js"
        }
      ]
    },
    "generate:attribution": {
      "name": "generate:attribution",
      "steps": [
        {
          "exec": "git secrets --scan && generate-attribution && mv oss-attribution/attribution.txt LICENSE-THIRD-PARTY"
        }
      ]
    },
    "graph": {
      "name": "graph",
      "description": "Generate dependency graph for monorepo",
      "steps": [
        {
          "exec": "yarn nx graph",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        },
        {
          "exec": "yarn nx run-many --target=install:ci --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "license:checker": {
      "name": "license:checker",
      "steps": [
        {
          "exec": "yarn license-checker --summary --production --excludePrivatePackages --onlyAllow 'MIT;Apache-2.0;ISC;'"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package for all affected projects",
      "steps": [
        {
          "exec": "yarn nx run-many --target=package --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation for all affected projects",
      "steps": [
        {
          "exec": "yarn run generate:attribution && yarn run license:checker"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation for all affected projects",
      "steps": [
        {
          "exec": "yarn nx run-many --target=pre-compile --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "prepare": {
      "name": "prepare",
      "steps": [
        {
          "exec": "husky install"
        }
      ]
    },
    "run-many": {
      "name": "run-many",
      "description": "Run task against multiple workspace projects",
      "steps": [
        {
          "exec": "yarn nx run-many",
          "receiveArgs": true
        }
      ]
    },
    "storybook": {
      "name": "storybook",
      "steps": [
        {
          "exec": "GENERATE_SOURCEMAP=false npx nx run @aws/threat-composer:storybook"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests for all affected projects",
      "steps": [
        {
          "exec": "yarn nx run-many --target=test --output-style=stream --nx-bail",
          "receiveArgs": true
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@aws/pdk,eslint-config-prettier,eslint-import-resolver-typescript,eslint-plugin-header,eslint-plugin-import,eslint-plugin-prettier,husky,license-checker,npm-check-updates,prettier,ts-node,typescript,@aws-cdk/aws-cognito-identitypool-alpha,aws-cdk-lib,cdk-nag"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @aws/pdk @types/node @typescript-eslint/eslint-plugin @typescript-eslint/parser constructs eslint-config-prettier eslint-import-resolver-typescript eslint-plugin-header eslint-plugin-import eslint-plugin-prettier eslint husky license-checker npm-check-updates nx prettier projen syncpack ts-node typescript @aws-cdk/aws-cognito-identitypool-alpha aws-cdk-lib cdk-nag"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "upgrade-deps": {
      "name": "upgrade-deps",
      "description": "Upgrade dependencies in the monorepo",
      "steps": [
        {
          "exec": "yarn npm-check-updates --deep --rejectVersion 0.0.0 -u --dep prod,dev,peer,optional,bundle --target=minor"
        },
        {
          "exec": "yarn syncpack fix-mismatches"
        },
        {
          "exec": "rm yarn.lock"
        },
        {
          "exec": "yarn install"
        },
        {
          "exec": "yarn projen"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background for all affected projects",
      "steps": [
        {
          "exec": "yarn nx run-many --target=watch --output-style=stream --skip-nx-cache --nx-ignore-cycles --nx-bail",
          "receiveArgs": true
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.ts and run \"npx projen\"."
}
