{
  "tasks": {
    "build": {
      "name": "build",
      "description": "Full release build",
      "steps": [
        {
          "spawn": "pre-compile"
        },
        {
          "spawn": "compile"
        },
        {
          "spawn": "post-compile"
        },
        {
          "spawn": "test"
        },
        {
          "spawn": "package"
        }
      ]
    },
    "compile": {
      "name": "compile",
      "description": "Only compile",
      "steps": [
        {
          "exec": "tsc --build"
        }
      ]
    },
    "default": {
      "name": "default",
      "description": "Synthesize project files"
    },
    "eslint": {
      "name": "eslint",
      "description": "Runs eslint against the codebase",
      "steps": [
        {
          "exec": "eslint --ext .ts,.tsx --fix --no-error-on-unmatched-pattern $@ src test build-tools",
          "receiveArgs": true
        }
      ]
    },
    "install": {
      "name": "install",
      "description": "Install project dependencies and update lockfile (non-frozen)",
      "steps": [
        {
          "exec": "yarn install --check-files"
        }
      ]
    },
    "install:ci": {
      "name": "install:ci",
      "description": "Install project dependencies using frozen lockfile",
      "steps": [
        {
          "exec": "yarn install --check-files --frozen-lockfile"
        }
      ]
    },
    "package": {
      "name": "package",
      "description": "Creates the distribution package",
      "steps": [
        {
          "exec": "mkdir -p dist/js"
        },
        {
          "exec": "mv $(npm pack) dist/js/"
        }
      ]
    },
    "post-compile": {
      "name": "post-compile",
      "description": "Runs after successful compilation",
      "steps": [
        {
          "exec": "rsync -arv --prune-empty-dirs --include=*/ --include=*.css --include=*.png --include=*.gif --exclude=* ./src/* ./lib"
        },
        {
          "exec": "yarn run storybook:build"
        }
      ]
    },
    "post-upgrade": {
      "name": "post-upgrade",
      "description": "Runs after upgrading dependencies"
    },
    "pre-compile": {
      "name": "pre-compile",
      "description": "Prepare the project for compilation",
      "steps": [
        {
          "exec": "rm -rf {lib,dist}"
        }
      ]
    },
    "storybook": {
      "name": "storybook",
      "steps": [
        {
          "exec": "storybook dev -p 6006"
        }
      ]
    },
    "storybook:build": {
      "name": "storybook:build",
      "steps": [
        {
          "exec": "storybook build -o storybook.out"
        }
      ]
    },
    "test": {
      "name": "test",
      "description": "Run tests",
      "steps": [
        {
          "exec": "jest --passWithNoTests --updateSnapshot",
          "receiveArgs": true
        },
        {
          "spawn": "eslint"
        }
      ]
    },
    "test:watch": {
      "name": "test:watch",
      "description": "Run jest in watch mode",
      "steps": [
        {
          "exec": "jest --watch"
        }
      ]
    },
    "upgrade": {
      "name": "upgrade",
      "description": "upgrade dependencies",
      "env": {
        "CI": "0"
      },
      "steps": [
        {
          "exec": "npx npm-check-updates@16 --upgrade --target=minor --peer --dep=dev,peer,prod,optional --filter=@babel/preset-env,@babel/preset-react,@babel/preset-typescript,@cloudscape-design/jest-preset,@storybook/addon-essentials,@storybook/addon-interactions,@storybook/addon-links,@storybook/blocks,@storybook/react,@storybook/react-webpack5,@storybook/testing-library,@types/d3,@types/indefinite,@types/jest,@types/lodash.isequal,@types/sanitize-html,@types/uuid,eslint-import-resolver-typescript,eslint-plugin-import,eslint-plugin-storybook,jest,merge,prop-types,storybook,ts-jest,typescript,@aws-northstar/ui,@cloudscape-design/board-components,@cloudscape-design/collection-hooks,@cloudscape-design/components,@cloudscape-design/design-tokens,@cloudscape-design/global-styles,@emotion/react,browser-image-compression,d3,indefinite,lodash.isequal,react-markdown,react-simply-carousel,rehype-raw,rehype-stringify,remark-frontmatter,remark-gfm,remark-parse,remark-rehype,sanitize-html,unified,use-local-storage-state,uuid,zod"
        },
        {
          "exec": "yarn install --check-files"
        },
        {
          "exec": "yarn upgrade @babel/preset-env @babel/preset-react @babel/preset-typescript @cloudscape-design/jest-preset @storybook/addon-essentials @storybook/addon-interactions @storybook/addon-links @storybook/blocks @storybook/react @storybook/react-webpack5 @storybook/testing-library @types/d3 @types/indefinite @types/jest @types/lodash.isequal @types/node @types/react-dom @types/react @types/sanitize-html @types/uuid @typescript-eslint/eslint-plugin @typescript-eslint/parser constructs eslint-import-resolver-typescript eslint-plugin-import eslint-plugin-storybook eslint jest jest-junit merge projen prop-types react-dom react storybook ts-jest typescript @aws-northstar/ui @cloudscape-design/board-components @cloudscape-design/collection-hooks @cloudscape-design/components @cloudscape-design/design-tokens @cloudscape-design/global-styles @emotion/react browser-image-compression d3 indefinite lodash.isequal react-markdown react-simply-carousel rehype-raw rehype-stringify remark-frontmatter remark-gfm remark-parse remark-rehype sanitize-html unified use-local-storage-state uuid zod"
        },
        {
          "exec": "npx projen"
        },
        {
          "spawn": "post-upgrade"
        }
      ]
    },
    "watch": {
      "name": "watch",
      "description": "Watch & compile in the background",
      "steps": [
        {
          "exec": "tsc --build -w"
        }
      ]
    }
  },
  "env": {
    "PATH": "$(npx -c \"node --print process.env.PATH\")"
  },
  "//": "~~ Generated by projen. To modify, edit .projenrc.js and run \"npx projen\"."
}
